name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install toml
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_EXISTS=$(gh release view "v${{ env.VERSION }}" --json tagName --jq '.tagName' 2>/dev/null || echo "not_found")
          if [ "$RELEASE_EXISTS" == "not_found" ]; then
            echo "Release does not exist"
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release already exists"
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Extract release notes from CHANGELOG.md
        if: env.RELEASE_EXISTS == 'false'
        run: |
          VERSION=${{ env.VERSION }}
          {
            echo 'NOTES<<EOF'
            awk "/^## \[$VERSION\]/,/^## \[/{if (\$0 ~ /^## \[.*\]/) next; print}" CHANGELOG.md
            echo EOF
          } >> $GITHUB_ENV

      - name: Check if pre-release
        if: env.RELEASE_EXISTS == 'false'
        run: |
          IS_PRERELEASE=$(awk -v version="$VERSION" '
            $0 ~ "^## \\[" version "\\].*Pre-release" {
              print "true"
              exit
            }
          ' CHANGELOG.md || echo "false")
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV

      - name: Create Release
        if: env.RELEASE_EXISTS == 'false'
        run: |
          if [ "${{ env.IS_PRERELEASE }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          else
            PRERELEASE_FLAG=""
          fi
          gh release create "v${{ env.VERSION }}" \
            --title "$([ "${{ env.IS_PRERELEASE }}" = "true" ] && echo "Pre-release" || echo "Release") ${{ env.VERSION }}" \
            --notes "${{ env.NOTES }}" \
            --verify-tag \
            $PRERELEASE_FLAG

      - name: Skip Release
        if: env.RELEASE_EXISTS == 'true'
        run: echo "Skipping release creation as the release already exists."
