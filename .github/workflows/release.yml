name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: pip install toml

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_EXISTS=$(gh release view "v${{ env.VERSION }}" --json tagName --jq '.tagName' || echo "not_found")
          if [ "$RELEASE_EXISTS" == "not_found" ]; then
            echo "Release does not exist"
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Release already exists"
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Extract release notes from CHANGELOG.md
        id: extract_notes
        if: env.RELEASE_EXISTS == 'false'
        run: |
          VERSION=${{ env.VERSION }}
          NOTES=$(awk "/^## \[$VERSION\]/,/^## \[/{if (\$0 ~ /^## \[.*\]/) next; print}" CHANGELOG.md)
          echo "NOTES=$NOTES" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        if: env.RELEASE_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ env.NOTES }}
          draft: false
          prerelease: false

      - name: Skip Release
        if: env.RELEASE_EXISTS == 'true'
        run: echo "Skipping release creation as the release already exists."
